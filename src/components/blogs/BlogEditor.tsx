import { useState, useEffect } from "react";
import { useForm } from "react-hook-form";
import { useNavigate } from "react-router-dom";
import { useToast } from "@/components/ui/use-toast";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Calendar } from "@/components/ui/calendar";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { format } from "date-fns";
import { cn } from "@/lib/utils";
import { CalendarIcon } from "lucide-react";
import { supabase } from "@/integrations/supabase/client";
import { BlogFormData } from "@/types/blog";
import BlogImageUpload from "./BlogImageUpload";
import BlogMetadata from "./BlogMetadata";

const BlogEditor = () => {
  const { toast } = useToast();
  const navigate = useNavigate();
  const [isSubmitting, setIsSubmitting] = useState(false);

  const form = useForm<BlogFormData>({
    defaultValues: {
      title: "",
      content: "",
      excerpt: "",
      category: "",
      tags: "",
      status: "draft",
      language: "en",
      font_family: "sans",
      is_private: false,
    },
  });

  useEffect(() => {
    const autosaveInterval = setInterval(() => {
      if (form.formState.isDirty) {
        handleSave("draft");
      }
    }, 60000);

    return () => clearInterval(autosaveInterval);
  }, [form.formState.isDirty]);

  const calculateReadingTime = (content: string) => {
    const wordsPerMinute = 200;
    const wordCount = content.trim().split(/\s+/).length;
    return Math.ceil(wordCount / wordsPerMinute);
  };

  const handleSave = async (status: "draft" | "published" | "scheduled") => {
    try {
      setIsSubmitting(true);
      const values = form.getValues();
      const readingTime = calculateReadingTime(values.content);

      // Prepare the data to match the database schema
      const blogData = {
        title: values.title,
        content: values.content,
        excerpt: values.excerpt,
        category: values.category,
        tags: values.tags.split(",").map((tag) => tag.trim()),
        status,
        scheduled_for: values.scheduled_for,
        reading_time: readingTime,
        language: values.language,
        font_family: values.font_family,
        is_private: values.is_private,
        image_url: values.image_url,
        author: "Anonymous", // TODO: Replace with actual user
        slug: "", // This will be auto-generated by the database trigger
      };

      const { data, error } = await supabase
        .from("blogs")
        .insert(blogData);

      if (error) throw error;

      toast({
        title: "Success",
        description: `Blog post ${status === "published" ? "published" : "saved"}!`,
      });

      if (status === "published") {
        navigate("/blogs");
      }
    } catch (error: any) {
      toast({
        title: "Error",
        description: error.message,
        variant: "destructive",
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <Form {...form}>
      <form className="space-y-8">
        <FormField
          control={form.control}
          name="title"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Title</FormLabel>
              <FormControl>
                <Input placeholder="Enter blog title" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />

        <FormField
          control={form.control}
          name="excerpt"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Excerpt</FormLabel>
              <FormControl>
                <Textarea
                  placeholder="Enter a brief description"
                  className="h-20"
                  {...field}
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />

        <FormField
          control={form.control}
          name="content"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Content</FormLabel>
              <FormControl>
                <Textarea
                  placeholder="Write your blog content here..."
                  className="min-h-[400px]"
                  {...field}
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />

        <BlogMetadata form={form} />

        <FormField
          control={form.control}
          name="scheduled_for"
          render={({ field }) => (
            <FormItem className="flex flex-col">
              <FormLabel>Schedule Publication</FormLabel>
              <Popover>
                <PopoverTrigger asChild>
                  <FormControl>
                    <Button
                      variant="outline"
                      className={cn(
                        "w-[240px] pl-3 text-left font-normal",
                        !field.value && "text-muted-foreground"
                      )}
                    >
                      {field.value ? (
                        format(new Date(field.value), "PPP")
                      ) : (
                        <span>Pick a date</span>
                      )}
                      <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                    </Button>
                  </FormControl>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0" align="start">
                  <Calendar
                    mode="single"
                    selected={field.value ? new Date(field.value) : undefined}
                    onSelect={(date) => field.onChange(date?.toISOString())}
                    disabled={(date) =>
                      date < new Date() || date < new Date("1900-01-01")
                    }
                    initialFocus
                  />
                </PopoverContent>
              </Popover>
              <FormMessage />
            </FormItem>
          )}
        />

        <FormField
          control={form.control}
          name="image_url"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Featured Image</FormLabel>
              <FormControl>
                <BlogImageUpload onImageUpload={field.onChange} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />

        <div className="flex justify-end gap-4">
          <Button
            type="button"
            variant="outline"
            onClick={() => handleSave("draft")}
            disabled={isSubmitting}
          >
            Save as Draft
          </Button>
          <Button
            type="button"
            onClick={() => handleSave("published")}
            disabled={isSubmitting}
          >
            Publish
          </Button>
        </div>
      </form>
    </Form>
  );
};

export default BlogEditor;